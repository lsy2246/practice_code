---
import { getCollection, type CollectionEntry } from "astro:content";
import MainLayout from "../../components/MainLayout.astro";

// 获取URL参数
const { searchParams } = Astro.url;
const categoryParam = searchParams.getAll('category');
const cityParam = searchParams.getAll('city');
const tagParam = searchParams.getAll('tag');
const searchParam = searchParams.get('search');
const pageParam = parseInt(searchParams.get('page') || '1');

// 获取文化内容集合
const cultures = await getCollection("culture");

// 按照日期排序
const sortByDate = <T extends { data: { pubDate?: Date | string, updatedDate?: Date | string } }>(a: T, b: T): number => {
  return new Date(b.data.pubDate || b.data.updatedDate || 0).getTime() -
         new Date(a.data.pubDate || a.data.updatedDate || 0).getTime();
};

// 基于URL参数筛选数据
let filteredCultures = [...cultures];

// 应用分类筛选
if (categoryParam.length > 0) {
  filteredCultures = filteredCultures.filter(culture => 
    culture.data.category && categoryParam.some(cat => 
      cat.toLowerCase() === culture.data.category?.toLowerCase()
    )
  );
}

// 应用城市筛选
if (cityParam.length > 0) {
  filteredCultures = filteredCultures.filter(culture => 
    culture.data.city && cityParam.some(city => 
      culture.data.city?.some((c: string) => c.toLowerCase() === city.toLowerCase())
    )
  );
}

// 应用标签筛选
if (tagParam.length > 0) {
  filteredCultures = filteredCultures.filter(culture => 
    culture.data.tags && tagParam.some(tag => 
      culture.data.tags?.some((t: string) => t.toLowerCase() === tag.toLowerCase())
    )
  );
}

// 应用搜索筛选
if (searchParam) {
  const searchLower = searchParam.toLowerCase();
  filteredCultures = filteredCultures.filter(culture => 
    (culture.data.title && culture.data.title.toLowerCase().includes(searchLower)) ||
    (culture.data.description && culture.data.description.toLowerCase().includes(searchLower)) ||
    (culture.data.tags && culture.data.tags.some((tag: string) => tag.toLowerCase().includes(searchLower)))
  );
}

// 先排序，再提取筛选项信息
const sortedCultures = filteredCultures.sort(sortByDate);

// 提取所有标签
const allTags: {name: string, count: number}[] = [];
cultures.forEach((culture: CollectionEntry<"culture">) => {
  culture.data.tags.forEach((tag: string) => {
    const existingTag = allTags.find(t => t.name === tag);
    if (existingTag) {
      existingTag.count++;
    } else {
      allTags.push({ name: tag, count: 1 });
    }
  });
});

// 按照标签出现次数排序
allTags.sort((a, b) => b.count - a.count);

// 获取所有分类并计数
const categories: {name: string, count: number}[] = [];
cultures.forEach((culture: CollectionEntry<"culture">) => {
  if (culture.data.category) {
    const existingCategory = categories.find(c => c.name === culture.data.category);
    if (existingCategory) {
      existingCategory.count++;
    } else {
      categories.push({ name: culture.data.category, count: 1 });
    }
  }
});

// 按照分类出现次数排序
categories.sort((a, b) => b.count - a.count);

// 获取所有城市并计数
const cities: {name: string, count: number}[] = [];
cultures.forEach((culture: CollectionEntry<"culture">) => {
  if (culture.data.city && culture.data.city.length > 0) {
    // 遍历每个城市数组
    culture.data.city.forEach((cityName: string) => {
      const existingCity = cities.find(c => c.name === cityName);
      if (existingCity) {
        existingCity.count++;
      } else {
        cities.push({ name: cityName, count: 1 });
      }
    });
  }
});

// 按照城市出现次数排序
cities.sort((a, b) => b.count - a.count);

// 提取所有历史时期
const periods: {name: string, count: number}[] = [];
sortedCultures.forEach((culture: CollectionEntry<"culture">) => {
  if ((culture.data as any).period) {
    const existingPeriod = periods.find(p => p.name === (culture.data as any).period);
    if (existingPeriod) {
      existingPeriod.count++;
    } else {
      periods.push({ name: (culture.data as any).period, count: 1 });
    }
  }
});

// 按照历史时期出现次数排序
periods.sort((a, b) => b.count - a.count);

// 分页逻辑
const itemsPerPage = 9;
const page = pageParam;
const totalPages = Math.ceil(sortedCultures.length / itemsPerPage);
const currentPageCultures = sortedCultures.slice((page - 1) * itemsPerPage, page * itemsPerPage);

// 标记当前激活的筛选条件
const activeCategories = categoryParam || [];
const activeCities = cityParam || [];
const activeTags = tagParam || [];
const activeSearch = searchParam || '';

// 构建基础URL（不包含分页参数）
const buildUrl = (params: Record<string, string[] | string | null>) => {
  const url = new URL(Astro.url);
  const newParams = new URLSearchParams();
  
  // 添加现有参数
  if (categoryParam.length > 0 && params.category !== null) {
    categoryParam.forEach(cat => newParams.append('category', cat));
  }
  if (cityParam.length > 0 && params.city !== null) {
    cityParam.forEach(city => newParams.append('city', city));
  }
  if (tagParam.length > 0 && params.tag !== null) {
    tagParam.forEach(tag => newParams.append('tag', tag));
  }
  if (searchParam && params.search !== null) {
    newParams.set('search', searchParam);
  }
  
  // 覆盖或添加新参数
  Object.entries(params).forEach(([key, value]) => {
    if (value === null) {
      newParams.delete(key);
    } else if (Array.isArray(value)) {
      newParams.delete(key);
      value.forEach(v => newParams.append(key, v));
    } else if (typeof value === 'string') {
      newParams.set(key, value);
    }
  });
  
  return `/culture${newParams.toString() ? '?' + newParams.toString() : ''}`;
};
---

<MainLayout title="河北文化典藏 - 河北游礼">
  <!-- 统一的背景容器 -->
  <div class="unified-bg dark-mode-bg">
    <!-- 古籍书卷风格的头部 - 添加深色模式边框 -->
    <div class="relative overflow-hidden min-h-[500px] flex items-center border-b border-amber-700/20 dark:border-amber-700/30">
      <!-- 古籍书卷式标题区域 -->
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        <div class="max-w-4xl mx-auto text-center">
          <!-- 书卷式内容区 -->
          <div class="relative py-12">
            <!-- 典籍风格标题 -->
            <div class="py-10 px-8">
              <div class="official-title">
                <h2 class="text-sm font-ancient tracking-[0.2em] text-red-800 dark:text-red-400 mb-4">河北文化典藏</h2>
                <h1 class="text-5xl md:text-6xl font-ancient text-gray-900 dark:text-dark-text mb-4 leading-snug">文化瑰宝</h1>
                <div class="w-40 h-0.5 mx-auto my-6 bg-amber-700"></div>
              </div>

              <p class="font-ancient-body text-lg text-gray-900 dark:text-dark-text max-w-2xl mx-auto leading-relaxed">
                典藏千年冀州文明，承载河北厚重历史文化积淀，
                <br>以字画诗词、戏曲非遗，述说河北文化的绵长与精彩
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 主内容区域 - 古籍风格 - 移除了背景 -->
    <div class="py-12">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- 文化介绍语 - 书卷风格 -->
        <div class="mb-16 max-w-4xl mx-auto">
          <div class="px-8 py-10 text-center border-l-2 border-r-2 border-amber-700/30 bg-amber-50/50 dark:bg-dark-surface/30 dark:border-amber-700/40 relative dark-mode-panel">
            <p class="text-xl text-gray-900 dark:text-dark-text font-ancient-body leading-relaxed">
              河北，古称"冀州"，是中华文明的发祥地之一。这片土地上流传着众多的文化瑰宝，从京剧、评剧等传统戏曲，到皮影、剪纸等民间艺术，从千年古刹到悠久历史的传统习俗，共同构成了河北独特而丰富的文化景观。
            </p>
          </div>
        </div>

        <!-- 筛选状态显示 -->
        {(categoryParam.length > 0 || cityParam.length > 0 || tagParam.length > 0 || searchParam) && (
          <div class="mb-8 max-w-4xl mx-auto">
            <div class="p-4 border-l-4 border-amber-700 bg-amber-50/80 dark:bg-dark-surface/40 dark:border-amber-700/60 flex justify-between items-center dark-mode-panel">
              <div class="flex flex-wrap gap-2 items-center">
                <span class="text-gray-800/80 dark:text-dark-text-secondary font-ancient-small">当前筛选:</span>
                
                {categoryParam.length > 0 && (
                  <div class="px-3 py-1 bg-amber-50/90 border border-amber-700/30 text-sm font-ancient-small text-gray-900 dark:text-dark-text rounded flex items-center">
                    <span class="mr-1">分类:</span>
                    <span class="font-medium">{categoryParam.join(', ')}</span>
                  </div>
                )}
                
                {cityParam.length > 0 && (
                  <div class="px-3 py-1 bg-amber-50/50 border border-amber-700/70 text-sm font-ancient-small text-gray-900 dark:text-dark-text rounded flex items-center">
                    <span class="mr-1">城市:</span>
                    <span class="font-medium">{cityParam.join(', ')}</span>
                  </div>
                )}
                
                {tagParam.length > 0 && (
                  <div class="px-3 py-1 bg-amber-50/90 border border-amber-700/30 text-sm font-ancient-small text-gray-900 dark:text-dark-text rounded flex items-center">
                    <span class="mr-1">标签:</span>
                    <span class="font-medium">{tagParam.join(', ')}</span>
                  </div>
                )}
                
                {searchParam && (
                  <div class="px-3 py-1 bg-amber-50/90 border border-amber-700/30 text-sm font-ancient-small text-gray-900 dark:text-dark-text rounded flex items-center">
                    <span class="mr-1">搜索:</span>
                    <span class="font-medium">"{searchParam}"</span>
                  </div>
                )}
              </div>
              
              <a 
                href="/culture" 
                class="text-amber-700 hover:text-red-800 dark:text-amber-500 dark:hover:text-amber-400 text-sm font-ancient-small flex items-center"
              >
                <span>清除筛选</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-amber-700 dark:text-amber-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </a>
            </div>
          </div>
        )}

        <!-- 无筛选结果提示 -->
        {sortedCultures.length === 0 && (
          <div class="my-12 max-w-xl mx-auto text-center">
            <div class="p-8 border-2 border-dashed border-amber-700/30 bg-amber-50/50 dark:bg-dark-surface/30 dark:border-amber-700/40 dark-mode-panel">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-amber-700/50 dark:text-amber-500/60 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <h3 class="text-xl font-ancient text-gray-900 dark:text-dark-text mb-2">未找到相关文化内容</h3>
              <p class="text-gray-900/80 dark:text-dark-text-secondary font-ancient-body mb-4">
                {categoryParam.length > 0 && `没有找到分类为"${categoryParam.join(', ')}"的内容。`}
                {cityParam.length > 0 && `没有找到位于"${cityParam.join(', ')}"的内容。`}
                {tagParam.length > 0 && `没有找到标签为"${tagParam.join(', ')}"的内容。`}
                {searchParam && `没有找到包含"${searchParam}"的内容。`}
                {!categoryParam.length && !cityParam.length && !tagParam.length && !searchParam && '没有找到符合条件的内容。'}
              </p>
              <a href="/culture" class="inline-block mt-2 px-4 py-2 bg-amber-700 hover:bg-amber-800 dark:bg-amber-700/80 dark:hover:bg-amber-700 text-white rounded-md font-ancient-small">查看全部文化内容</a>
            </div>
          </div>
        )}

        <!-- 移动端筛选按钮和搜索框 -->
        <div class="lg:hidden mb-6 flex justify-between items-center">
          <button id="mobile-filter-toggle" class="bg-amber-700 hover:bg-amber-800 dark:bg-amber-700/80 dark:hover:bg-amber-700 text-white px-4 py-2 rounded-md inline-flex items-center shadow-md">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
            </svg>
            <span class="inline-block">筛选</span>
          </button>

          <!-- 移动端搜索框 -->
          <form id="search-form-mobile" class="relative flex-grow mx-3" method="get" action="/culture">
            <input
              type="text"
              name="search"
              placeholder="搜索文化内容..."
              value={searchParam || ''}
              class="w-full px-4 py-2 border-2 border-amber-700/30 bg-amber-50/70 dark:bg-dark-surface/70 placeholder-gray-900/50 dark:placeholder-dark-text-secondary/50 text-gray-900 dark:text-dark-text font-ancient-body focus:outline-none focus:border-amber-700"
            />
            <!-- 保留现有参数 -->
            {categoryParam.length > 0 && <input type="hidden" name="category" value={categoryParam.join(',')} />}
            {cityParam.length > 0 && <input type="hidden" name="city" value={cityParam.join(',')} />}
            {tagParam.length > 0 && <input type="hidden" name="tag" value={tagParam.join(',')} />}
            
            <button type="submit" class="absolute right-3 top-1/2 transform -translate-y-1/2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-amber-700 dark:text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </form>
        </div>

        <!-- 移动端筛选抽屉 - 默认隐藏 -->
        <div id="mobile-filter-drawer" class="lg:hidden fixed inset-0 z-50 transform translate-x-full ">
          <div class="absolute inset-0 bg-black/50 backdrop-blur-sm" id="mobile-filter-backdrop"></div>
          <div class="absolute right-0 top-0 bottom-0 w-4/5 max-w-sm bg-amber-50 dark:bg-dark-surface shadow-xl overflow-y-auto">
            <div class="p-4 border-b border-amber-700/20 dark:border-amber-700/30 flex justify-between items-center">
              <h3 class="text-lg font-ancient-heading text-gray-900 dark:text-dark-text">筛选</h3>
              <button id="mobile-filter-close" class="rounded-full p-2 text-gray-900/70 dark:text-dark-text-secondary hover:bg-amber-700/10">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-900 dark:text-dark-text" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div class="p-4 space-y-6">
              <!-- 文化分类 - 移动端 -->
              <div>
                <h3 class="text-base font-ancient-heading text-gray-900 dark:text-dark-text mb-3 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-amber-700 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  文化分类
                </h3>
                <div class="flex flex-wrap gap-2">
                  {categories.slice(0, 6).map((category) => (
                    <a 
                      href={buildUrl({ 
                        category: activeCategories.includes(category.name) 
                          ? activeCategories.filter(c => c !== category.name) 
                          : [...activeCategories, category.name]
                      })}
                      class:list={[
                        "flex items-center group cursor-pointer hover:bg-amber-100/50 dark:hover:bg-dark-card/50 p-1.5 rounded",
                        { "bg-amber-50/80 dark:bg-dark-card/70": activeCategories.includes(category.name) }
                      ]}
                    >
                      <div class={`checkbox-container mr-2 flex-shrink-0 group-hover:bg-amber-200/40 relative ${activeCategories.includes(category.name) ? 'checkbox-selected' : ''}`}>
                        {activeCategories.includes(category.name) && (
                          <div class="absolute inset-0 flex items-center justify-center">
                            <div class="checkmark"></div>
                          </div>
                        )}
                      </div>
                      <div class="text-gray-900 dark:text-dark-text group-hover:text-amber-700 dark:group-hover:text-amber-400">
                        <span>{category.name}</span>
                        <span class="text-gray-900/60 dark:text-dark-text-secondary text-sm">({category.count})</span>
                      </div>
                    </a>
                  ))}
                </div>
              </div>

              <!-- 地域分布 - 移动端 -->
              <div>
                <h3 class="text-base font-ancient-heading text-gray-900 dark:text-dark-text mb-3 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-amber-700 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  地域分布
                </h3>
                <div class="flex flex-wrap gap-2">
                  {cities.slice(0, 6).map((city) => (
                    <a 
                      href={buildUrl({ 
                        city: activeCities.includes(city.name) 
                          ? activeCities.filter(c => c !== city.name) 
                          : [...activeCities, city.name]
                      })}
                      class:list={[
                        "flex items-center group cursor-pointer hover:bg-amber-100/50 dark:hover:bg-dark-card/50 p-1.5 rounded",
                        { "bg-amber-50/80 dark:bg-dark-card/70": activeCities.includes(city.name) }
                      ]}
                    >
                      <div class={`checkbox-container mr-2 flex-shrink-0 group-hover:bg-amber-200/40 relative ${activeCities.includes(city.name) ? 'checkbox-selected' : ''}`}>
                        {activeCities.includes(city.name) && (
                          <div class="absolute inset-0 flex items-center justify-center">
                            <div class="checkmark"></div>
                          </div>
                        )}
                      </div>
                      <div class="text-gray-900 dark:text-dark-text group-hover:text-amber-700 dark:group-hover:text-amber-400">
                        <span>{city.name}</span>
                        <span class="text-gray-900/60 dark:text-dark-text-secondary text-sm">({city.count})</span>
                      </div>
                    </a>
                  ))}
                </div>
              </div>

              <!-- 标签筛选 - 移动端 -->
              <div>
                <h3 class="text-base font-ancient-heading text-gray-900 dark:text-dark-text mb-3 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-amber-700 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  特色标签
                </h3>
                <div class="flex flex-wrap gap-2">
                  {allTags.slice(0, 6).map((tag) => (
                    <a 
                      href={buildUrl({ 
                        tag: activeTags.includes(tag.name) 
                          ? activeTags.filter(t => t !== tag.name) 
                          : [...activeTags, tag.name]
                      })}
                      class:list={[
                        "px-3 py-1.5 bg-amber-50/70 dark:bg-dark-card/50 text-sm font-ancient-small border rounded-md flex items-center tag-item",
                        activeTags.includes(tag.name)
                          ? "border-amber-700 tag-selected"
                          : "border-amber-700/30 text-gray-900 dark:text-dark-text"
                      ]}
                    >
                      <span>{tag.name}</span>
                      <span class="ml-1 text-xs text-gray-900/60 dark:text-dark-text-secondary">({tag.count})</span>
                    </a>
                  ))}
                </div>
              </div>

              <!-- 底部应用按钮 -->
              <div class="border-t border-amber-700/20 dark:border-amber-700/30 pt-3 flex justify-end">
                <button id="mobile-filter-close" class="bg-amber-700 hover:bg-amber-800 dark:bg-amber-700/80 dark:hover:bg-amber-700 text-white px-6 py-2 rounded-md shadow-md inline-flex items-center">
                  <span class="inline-block">关闭筛选</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-4 gap-x-10 gap-y-6">
          <!-- 左侧筛选栏 - 古籍风格 - 只在桌面显示 -->
          <div class="hidden lg:block lg:col-span-1">
            <div class="sticky top-24 space-y-8 pt-0">
              <!-- 搜索框 - 书法风 -->
              <div class="bg-amber-50 p-6 border-2 border-amber-700/30 dark:bg-dark-surface/50 dark:border-amber-700/40 shadow-md dark-mode-panel">
                <h3 class="text-lg font-ancient-heading text-gray-900 dark:text-dark-text mb-4 flex items-center">
                  <svg class="w-5 h-5 mr-2 text-amber-700 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                  </svg>
                  典籍检索
                </h3>

                <form id="search-form" class="relative" method="get" action="/culture">
                  <input
                    type="text"
                    name="search"
                    placeholder="输入关键词..."
                    value={searchParam || ''}
                    class="w-full px-4 py-2 border-2 border-amber-700/30 bg-amber-50/70 dark:bg-dark-surface/70 placeholder-gray-900/50 dark:placeholder-dark-text-secondary/50 text-gray-900 dark:text-dark-text font-ancient-body focus:outline-none focus:border-amber-700"
                  />
                  <!-- 保留现有参数 -->
                  {categoryParam.length > 0 && <input type="hidden" name="category" value={categoryParam.join(',')} />}
                  {cityParam.length > 0 && <input type="hidden" name="city" value={cityParam.join(',')} />}
                  {tagParam.length > 0 && <input type="hidden" name="tag" value={tagParam.join(',')} />}
                  
                  <button type="submit" class="absolute right-3 top-2 text-amber-700/70 dark:text-amber-400/70">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </button>
                </form>
              </div>

              <!-- 分类筛选 - 卷轴风格 -->
              <div class="bg-amber-50 p-6 border-2 border-amber-700/30 dark:bg-dark-surface/50 dark:border-amber-700/40 shadow-md dark-mode-panel">
                <h3 class="text-lg font-ancient-heading text-gray-900 dark:text-dark-text mb-4 flex items-center">
                  <svg class="w-5 h-5 mr-2 text-amber-700 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  文化分类
                </h3>

                <div class="space-y-2 font-ancient-body max-h-48 overflow-y-auto pr-2">
                  {categories.map((category) => (
                    <a 
                      href={buildUrl({ 
                        category: activeCategories.includes(category.name) 
                          ? activeCategories.filter(c => c !== category.name) 
                          : [...activeCategories, category.name]
                      })}
                      class:list={[
                        "flex items-center group cursor-pointer hover:bg-amber-100/50 dark:hover:bg-dark-card/50 p-1.5 rounded",
                        { "bg-amber-50/80 dark:bg-dark-card/70": activeCategories.includes(category.name) }
                      ]}
                    >
                      <div class={`checkbox-container mr-2 flex-shrink-0 group-hover:bg-amber-200/40 relative ${activeCategories.includes(category.name) ? 'checkbox-selected' : ''}`}>
                        {activeCategories.includes(category.name) && (
                          <div class="absolute inset-0 flex items-center justify-center">
                            <div class="checkmark"></div>
                          </div>
                        )}
                      </div>
                      <div class="text-gray-900 dark:text-dark-text group-hover:text-amber-700 dark:group-hover:text-amber-400">
                        <span>{category.name}</span>
                        <span class="text-gray-900/60 dark:text-dark-text-secondary text-sm">({category.count})</span>
                      </div>
                    </a>
                  ))}
                </div>
              </div>

              <!-- 城市筛选 - 新增部分 -->
              <div class="bg-amber-50 p-6 border-2 border-amber-700/30 dark:bg-dark-surface/50 dark:border-amber-700/40 shadow-md dark-mode-panel">
                <h3 class="text-lg font-ancient-heading text-gray-900 dark:text-dark-text mb-4 flex items-center">
                  <svg class="w-5 h-5 mr-2 text-amber-700 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  地域分布
                </h3>

                <div class="space-y-2 font-ancient-body max-h-48 overflow-y-auto pr-2">
                  {cities.map((city) => (
                    <a 
                      href={buildUrl({ 
                        city: activeCities.includes(city.name) 
                          ? activeCities.filter(c => c !== city.name) 
                          : [...activeCities, city.name]
                      })}
                      class:list={[
                        "flex items-center group cursor-pointer hover:bg-amber-100/50 dark:hover:bg-dark-card/50 p-1.5 rounded",
                        { "bg-amber-50/80 dark:bg-dark-card/70": activeCities.includes(city.name) }
                      ]}
                    >
                      <div class={`checkbox-container mr-2 flex-shrink-0 group-hover:bg-amber-200/40 relative ${activeCities.includes(city.name) ? 'checkbox-selected' : ''}`}>
                        {activeCities.includes(city.name) && (
                          <div class="absolute inset-0 flex items-center justify-center">
                            <div class="checkmark"></div>
                          </div>
                        )}
                      </div>
                      <div class="text-gray-900 dark:text-dark-text group-hover:text-amber-700 dark:group-hover:text-amber-400">
                        <span>{city.name}</span>
                        <span class="text-gray-900/60 dark:text-dark-text-secondary text-sm">({city.count})</span>
                      </div>
                    </a>
                  ))}
                </div>
              </div>

              <!-- 标签筛选 - 古籍风格 -->
              <div class="bg-amber-50 p-6 border-2 border-amber-700/30 dark:bg-dark-surface/50 dark:border-amber-700/40 shadow-md dark-mode-panel">
                <h3 class="text-lg font-ancient-heading text-gray-900 dark:text-dark-text mb-4 flex items-center">
                  <svg class="w-5 h-5 mr-2 text-amber-700 dark:text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  特色标签
                </h3>

                <div class="flex flex-wrap gap-2">
                  {allTags.slice(0, 6).map((tag) => (
                    <a 
                      href={buildUrl({ 
                        tag: activeTags.includes(tag.name) 
                          ? activeTags.filter(t => t !== tag.name) 
                          : [...activeTags, tag.name]
                      })}
                      class:list={[
                        "px-3 py-1.5 bg-amber-50/70 dark:bg-dark-card/50 text-sm font-ancient-small border rounded-md flex items-center tag-item",
                        activeTags.includes(tag.name)
                          ? "border-amber-700 tag-selected"
                          : "border-amber-700/30 text-gray-900 dark:text-dark-text"
                      ]}
                    >
                      <span>{tag.name}</span>
                      <span class="ml-1 text-xs text-gray-900/60 dark:text-dark-text-secondary">({tag.count})</span>
                    </a>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <!-- 右侧内容区域 - 古籍风格 -->
          <div class="lg:col-span-3 lg:mt-0">
            <!-- 内容分类标签 - 古卷风格 -->
            <div class="flex flex-wrap gap-3 mb-8 lg:hidden">
              {/* 内容分类标签部分 */}
            </div>

            <!-- 文化内容列表 - 卷轴风格网格 -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 auto-rows-fr">
              {currentPageCultures.map((culture, index) => (
                <a href={`/culture/${culture.slug}`} class="block group h-full">
                  <div class="culture-card relative h-full bg-amber-50 flex flex-col shadow-lg group-hover:shadow-xl overflow-hidden dark-mode-card" 
                       data-tags={JSON.stringify(culture.data.tags.map((tag: string) => tag.toLowerCase()))}
                       data-category={culture.data.category?.toLowerCase() || ''}
                       data-cities={JSON.stringify(culture.data.city?.map((city: string) => city.toLowerCase()) || [])}
                  >
                    <div class="relative h-48 overflow-hidden border-b-2 border-amber-700/30 dark:border-amber-700/40">
                      <!-- 装饰元素 -->
                      <div class="absolute top-2 left-2 w-8 h-8 ink-decoration opacity-10 dark:opacity-15"></div>
                      <div class="absolute bottom-2 right-2 w-8 h-8 ink-decoration opacity-10 dark:opacity-15 rotate-180"></div>

                      <!-- 内容显示 -->
                      <div class="absolute inset-0 flex items-center justify-center">
                        {culture.data.image ? (
                          <img 
                            src={culture.data.image} 
                            alt={culture.data.title}
                            class="w-full h-full object-cover card-image"
                          />
                        ) : (
                          <span class="text-gray-900/40 dark:text-dark-text/40">{culture.data.title}</span>
                        )}
                      </div>

                      <!-- 印章效果 -->
                      {index % 4 === 0 && (
                        <div class="absolute top-4 right-4 w-16 h-16 seal-mark opacity-40 dark:opacity-50 rotate-12"></div>
                      )}

                      {/* 文化类别标签 */}
                      {culture.data.category && (
                        <div class="absolute top-3 right-3 px-2 py-1 bg-amber-50/90 dark:bg-dark-card/70 text-gray-900 dark:text-dark-text text-xs font-ancient-small border border-amber-700/30 dark:border-amber-700/40 category-tag" data-category-value={culture.data.category.toLowerCase()}>
                          {culture.data.category}
                        </div>
                      )}
                    </div>

                    <div class="p-5 flex flex-col flex-grow">
                      <div class="mb-3">
                        <h3 class="text-xl font-ancient text-gray-900 dark:text-dark-text group-hover:card-title-hover">
                          {culture.data.title}
                        </h3>
                        {(culture.data as any).period && (
                          <div class="text-sm text-gray-900/70 dark:text-dark-text-secondary mt-1 font-ancient-small period-tag" data-period-value={(culture.data as any).period.toLowerCase()}>
                            {(culture.data as any).period} 时期
                          </div>
                        )}
                      </div>

                      <p class="text-gray-900/80 dark:text-dark-text-secondary text-sm line-clamp-2 mb-4 font-ancient-body">
                        {culture.data.description}
                      </p>

                      <div class="flex overflow-x-auto gap-1.5 mb-4 min-h-[2rem] pb-2">
                        {culture.data.tags.map((tag: string) => (
                          <span class="flex-shrink-0 px-2 py-1 bg-amber-50/50 dark:bg-dark-card/50 text-gray-900/70 dark:text-dark-text-secondary text-xs font-ancient-small border border-amber-700/20 dark:border-amber-700/40" data-tag-value={tag.toLowerCase()}>
                            {tag}
                          </span>
                        ))}
                      </div>

                      {/* 在卡片中添加城市信息显示 */}
                      <div class="min-h-[1.5rem]">
                        {culture.data.city && culture.data.city.length > 0 && (
                          <div class="flex overflow-x-auto gap-1.5 mt-1 mb-2 pb-2">
                            {culture.data.city.map((cityName: string) => (
                              <span class="flex-shrink-0 px-2 py-1 bg-amber-50/50 dark:bg-dark-card/50 text-gray-900/70 dark:text-dark-text-secondary text-xs font-ancient-small border border-amber-700/50 dark:border-amber-700/40 city-tag" data-city-value={cityName.toLowerCase()}>
                                {cityName}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>

                      <div class="flex items-center text-gray-900/80 dark:text-dark-text-secondary text-sm group-hover:translate-x-1 font-ancient-small group-hover:text-red-800 dark:group-hover:text-red-400 mt-auto">
                        查阅详情
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" viewBox="0 0 20 20" fill="currentColor">
                          <path fill-rule="evenodd" d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                        </svg>
                      </div>
                    </div>
                  </div>
                </a>
              ))}
            </div>

            <!-- 无搜索结果提示 - 在客户端控制显示 -->
            <div id="no-results-message" class="hidden py-16">
              <div class="max-w-md mx-auto bg-amber-50 dark:bg-dark-surface/50 rounded-lg shadow-md p-8 border-2 border-amber-700/30 dark:border-amber-700/40 text-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-amber-700/50 dark:text-amber-500/60" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                <h3 class="mt-4 text-xl font-ancient-heading text-gray-900 dark:text-dark-text">未找到匹配结果</h3>
                <p id="search-term-message" class="mt-2 text-gray-900/80 dark:text-dark-text-secondary font-ancient-body">
                  抱歉，未找到相关文化内容。请尝试其他关键词或浏览所有内容。
                </p>
                <div class="mt-6 flex flex-col space-y-3">
                  <a href="/culture" class="text-red-800 hover:text-red-800/70 font-ancient-small">
                    查看所有文化内容 &rarr;
                  </a>
                  <button id="reset-filters-btn" class="mx-auto px-4 py-2 bg-amber-50/70 dark:bg-dark-card/50 text-gray-900 dark:text-dark-text text-sm font-ancient-small border border-amber-700/30 dark:border-amber-700/40 hover:border-amber-700/50 hover:text-amber-700 dark:hover:text-amber-400">
                    重置所有筛选条件
                  </button>
                </div>
              </div>
            </div>

            <!-- 分页控件 - 古籍风格 -->
            {totalPages > 1 && (
              <div class="mt-16 flex justify-center">
                <div class="inline-flex bg-amber-50 dark:bg-dark-surface/50 border-2 border-amber-700/30 dark:border-amber-700/40 rounded-md overflow-hidden">
                  <!-- 上一页 -->
                  <a
                    href={page > 1 ? buildUrl({ page: (page - 1).toString() }) : undefined}
                    class:list={[
                      "px-4 py-2 border-r-2 border-amber-700/30 dark:border-amber-700/40 flex items-center space-x-1 font-ancient-small",
                      page > 1
                        ? "text-amber-700 dark:text-amber-500 hover:bg-amber-50/70 dark:hover:bg-dark-card/50" 
                        : "text-gray-900/30 dark:text-dark-text-secondary/30 cursor-not-allowed"
                    ]}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                    <span>上一页</span>
                  </a>

                  <!-- 页码 -->
                  {Array.from({ length: Math.min(totalPages, 5) }, (_, i) => {
                    const pageNum = i + 1;
                    return (
                      <a
                        href={buildUrl({ page: pageNum.toString() })}
                        class:list={[
                          "w-10 flex items-center justify-center border-r-2 border-amber-700/30 dark:border-amber-700/40 font-ancient-small",
                          pageNum === page
                            ? "bg-amber-700/20 dark:bg-amber-700/30 text-amber-700 dark:text-amber-400 font-medium" 
                            : "text-gray-900 dark:text-dark-text hover:bg-amber-50/70 dark:hover:bg-dark-card/50"
                        ]}
                      >
                        {pageNum}
                      </a>
                    );
                  })}

                  <!-- 更多页 -->
                  {totalPages > 5 && (
                    <span class="w-10 flex items-center justify-center border-r-2 border-amber-700/30 dark:border-amber-700/40 text-gray-900/50 dark:text-dark-text-secondary/60 font-ancient-small">
                      ...
                    </span>
                  )}

                  <!-- 末页 -->
                  {totalPages > 5 && (
                    <a
                      href={buildUrl({ page: totalPages.toString() })}
                      class="w-10 flex items-center justify-center border-r-2 border-amber-700/30 dark:border-amber-700/40 text-gray-900 dark:text-dark-text hover:bg-amber-50/70 dark:hover:bg-dark-card/50 font-ancient-small"
                    >
                      {totalPages}
                    </a>
                  )}

                  <!-- 下一页 -->
                  <a
                    href={page < totalPages ? buildUrl({ page: (page + 1).toString() }) : undefined}
                    class:list={[
                      "px-4 py-2 flex items-center space-x-1 font-ancient-small",
                      page < totalPages
                        ? "text-amber-700 dark:text-amber-500 hover:bg-amber-50/70 dark:hover:bg-dark-card/50" 
                        : "text-gray-900/30 dark:text-dark-text-secondary/30 cursor-not-allowed"
                    ]}
                  >
                    <span>下一页</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                  </a>
                </div>
              </div>
            )}

            <!-- 底部引言 - 古籍风格 -->
            <div class="mt-20 mb-10 text-center relative">
              <!-- 装饰元素 -->
              <div class="absolute left-1/4 top-0 w-16 h-1 bg-amber-700/30 dark:bg-amber-700/40"></div>
              <div class="absolute right-1/4 bottom-0 w-16 h-1 bg-amber-700/30 dark:bg-amber-700/40"></div>

              <blockquote class="text-xl text-gray-900 dark:text-dark-text font-ancient italic">
                "文化是一个国家、一个民族的灵魂"
              </blockquote>
              <div class="mt-3 text-sm text-gray-900/60 dark:text-dark-text-secondary font-ancient-small">— 河北历史文化研究院</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    // 确保深色模式正确应用到所有元素
    function applyDarkModeStyles() {
      const isDarkMode = document.documentElement.getAttribute('data-theme') === 'dark';
      const darkModeElements = document.querySelectorAll('.dark-mode-card, .dark-mode-panel, .dark-mode-bg');
      
      darkModeElements.forEach(element => {
        if (isDarkMode) {
          element.classList.add('dark-mode-active');
        } else {
          element.classList.remove('dark-mode-active');
        }
      });
    }

    // 初始应用
    applyDarkModeStyles();
    
    // 监听主题变化
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'data-theme') {
          applyDarkModeStyles();
        }
      });
    });
    
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    });
    
    // 移动端筛选抽屉
    const mobileFilterToggle = document.getElementById('mobile-filter-toggle');
    const mobileFilterDrawer = document.getElementById('mobile-filter-drawer');
    const mobileFilterBackdrop = document.getElementById('mobile-filter-backdrop');
    const mobileFilterClose = document.getElementById('mobile-filter-close');

    // 打开移动端筛选抽屉
    if (mobileFilterToggle && mobileFilterDrawer) {
      mobileFilterToggle.addEventListener('click', () => {
        mobileFilterDrawer.classList.remove('translate-x-full');
        document.body.classList.add('overflow-hidden');
      });
    }

    // 关闭抽屉函数
    const closeFilterDrawer = () => {
      if (mobileFilterDrawer) {
        mobileFilterDrawer.classList.add('translate-x-full');
        document.body.classList.remove('overflow-hidden');
      }
    };

    // 点击背景关闭抽屉
    if (mobileFilterBackdrop) {
      mobileFilterBackdrop.addEventListener('click', closeFilterDrawer);
    }

    // 点击关闭按钮关闭抽屉
    if (mobileFilterClose) {
      mobileFilterClose.addEventListener('click', closeFilterDrawer);
    }

    // 应用筛选函数
    function applyFilters() {
      const params = new URLSearchParams(window.location.search);
      const category = params.getAll('category');
      const city = params.getAll('city');
      const tag = params.getAll('tag');
      const search = params.get('search');
      
      // 获取所有文化卡片
      const cards = document.querySelectorAll('.culture-card');
      
      let visibleCount = 0;
      
      cards.forEach((card, index) => {
        let shouldShow = true;
        
        // 检查分类
        if (category.length > 0 && shouldShow) {
          const cardCategory = card.getAttribute('data-category');
          if (!category.some(cat => cat.toLowerCase() === cardCategory)) {
            shouldShow = false;
          }
        }
        
        // 检查城市
        if (city.length > 0 && shouldShow) {
          try {
            const cardCities = JSON.parse(card.getAttribute('data-cities') || '[]');
            if (!city.some(city => cardCities.includes(city))) {
              shouldShow = false;
            }
          } catch (e) {
            shouldShow = false;
          }
        }
        
        // 检查标签
        if (tag.length > 0 && shouldShow) {
          try {
            const cardTags = JSON.parse(card.getAttribute('data-tags') || '[]');
            if (!tag.some(tag => cardTags.includes(tag))) {
              shouldShow = false;
            }
          } catch (e) {
            shouldShow = false;
          }
        }

        // 检查搜索关键词
        if (search && shouldShow) {
          const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
          const description = card.querySelector('p.line-clamp-2')?.textContent?.toLowerCase() || '';
          const tags = JSON.parse(card.getAttribute('data-tags') || '[]').join(' ').toLowerCase();
          const cities = JSON.parse(card.getAttribute('data-cities') || '[]').join(' ').toLowerCase();
          
          if (!title.includes(search) && 
              !description.includes(search) && 
              !tags.includes(search) && 
              !cities.includes(search)) {
            shouldShow = false;
          }
        }
        
        // 更新卡片显示状态 - 修复隐藏逻辑
        const cardLink = card.closest('a');
        if (cardLink) {
          if (shouldShow) {
            cardLink.style.display = '';
            visibleCount++;
          } else {
            cardLink.style.display = 'none';
          }
        }
      });
      
      // 更新 UI 显示
      updateFilterUI();
      
      // 处理无结果情况
      const noResultsMessage = document.getElementById('no-results-message');
      const searchTermMessage = document.getElementById('search-term-message');
      const gridContainer = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-3');
      
      if (visibleCount === 0) {
        if (gridContainer) gridContainer.style.display = 'none';
        if (noResultsMessage) {
          noResultsMessage.style.display = 'block';
          if (searchTermMessage) {
            let message = '抱歉，未找到相关文化内容。';
            if (search) {
              message += `没有找到包含"${search}"的内容。`;
            }
            if (category.length > 0) {
              message += `没有找到分类为"${category.join(', ')}"的内容。`;
            }
            if (city.length > 0) {
              message += `没有找到位于"${city.join(', ')}"的内容。`;
            }
            if (tag.length > 0) {
              message += `没有找到标签为"${tag.join(', ')}"的内容。`;
            }
            searchTermMessage.textContent = message;
          }
        }
      } else {
        if (gridContainer) gridContainer.style.display = 'grid';
        if (noResultsMessage) noResultsMessage.style.display = 'none';
      }
    }

    // 更新筛选 UI
    function updateFilterUI() {
      const params = new URLSearchParams(window.location.search);
      const currentCategory = params.getAll('category');
      const currentCity = params.getAll('city');
      const currentTag = params.getAll('tag');
      const currentSearch = params.get('search');
      
      // 更新标签选中状态
      const tagLinks = document.querySelectorAll('a[href*="?tag"]');
      
      tagLinks.forEach((link, index) => {
        try {
          const url = new URL(link.href);
          const linkTag = url.searchParams.getAll('tag');
          
          // 检查是否选中
          const isSelected = currentTag.some(tag => linkTag.includes(tag));
          
          // 更新标签样式
          if (isSelected) {
            link.classList.add('tag-selected');
            link.classList.remove('border-amber-700/30');
            link.classList.add('border-amber-700');
          } else {
            link.classList.remove('tag-selected');
            link.classList.remove('border-amber-700');
            link.classList.add('border-amber-700/30');
          }
        } catch (e) {
          // 处理错误
        }
      });
      
      // 更新分类选中状态
      const categoryLinks = document.querySelectorAll('a[href*="?category"]');
      
      categoryLinks.forEach((link, index) => {
        try {
          const url = new URL(link.href);
          const linkCategory = url.searchParams.getAll('category');
          
          // 检查是否选中
          const isSelected = currentCategory.some(cat => linkCategory.includes(cat));
          
          // 处理带复选框的分类项（桌面端左侧栏）
          const checkbox = link.querySelector('.checkbox-container');
          if (checkbox) {
            if (isSelected) {
              checkbox.classList.add('checkbox-selected');
              link.classList.add('bg-amber-50/80');
            } else {
              checkbox.classList.remove('checkbox-selected');
              link.classList.remove('bg-amber-50/80');
            }
          } 
        } catch (e) {
          // 处理错误
        }
      });
      
      // 更新城市选中状态
      const cityLinks = document.querySelectorAll('a[href*="?city"]');
      
      cityLinks.forEach((link, index) => {
        try {
          const url = new URL(link.href);
          const linkCity = url.searchParams.getAll('city');
          
          // 检查是否选中
          const isSelected = currentCity.some(city => linkCity.includes(city));
          
          // 处理带复选框的城市项（桌面端左侧栏）
          const checkbox = link.querySelector('.checkbox-container');
          if (checkbox) {
            if (isSelected) {
              checkbox.classList.add('checkbox-selected');
              link.classList.add('bg-amber-50/80');
            } else {
              checkbox.classList.remove('checkbox-selected');
              link.classList.remove('bg-amber-50/80');
            }
          } 
        } catch (e) {
          // 处理错误
        }
      });
    }

    // 获取所有筛选链接
    const filterLinks = document.querySelectorAll('a[href*="?category"], a[href*="?city"], a[href*="?tag"]');
    
    // 为每个筛选链接添加点击事件监听器
    filterLinks.forEach((link, index) => {
      link.addEventListener('click', (e) => {
        e.preventDefault(); // 阻止默认行为
        
        const href = link.href;
        const url = new URL(href);
        
        // 获取当前的筛选参数
        const params = new URLSearchParams(window.location.search);
        const clickedParam = Array.from(url.searchParams.entries())[0];
        
        if (clickedParam) {
          const [paramName, paramValue] = clickedParam;
          
          // 如果当前参数值与点击的值相同，则移除该参数
          if (params.getAll(paramName).includes(paramValue)) {
            params.delete(paramName, paramValue);
          } else {
            // 否则设置新的参数值
            params.append(paramName, paramValue);
          }
          
          // 更新 URL，但不刷新页面
          const newUrl = `${window.location.pathname}${params.toString() ? '?' + params.toString() : ''}`;
          window.history.pushState({}, '', newUrl);
          
          // 应用筛选
          applyFilters();
        }
      });
    });

    // 处理搜索表单提交
    const searchForm = document.getElementById('search-form');
    const searchFormMobile = document.getElementById('search-form-mobile');

    function handleSearch(e) {
      e.preventDefault();
      const form = e.target;
      const searchInput = form.querySelector('input[name="search"]');
      
      // 获取当前的筛选参数
      const params = new URLSearchParams(window.location.search);
      
      // 更新或删除搜索参数
      if (searchInput.value.trim()) {
        params.set('search', searchInput.value.trim());
      } else {
        params.delete('search');
      }
      
      // 更新 URL，但不刷新页面
      const newUrl = `${window.location.pathname}${params.toString() ? '?' + params.toString() : ''}`;
      window.history.pushState({}, '', newUrl);
      
      // 应用筛选
      applyFilters();
    }

    // 为搜索表单添加提交事件监听器
    if (searchForm) {
      searchForm.addEventListener('submit', handleSearch);
    }
    if (searchFormMobile) {
      searchFormMobile.addEventListener('submit', handleSearch);
    }

    // 重置筛选按钮
    const resetFiltersBtn = document.getElementById('reset-filters-btn');
    if (resetFiltersBtn) {
      resetFiltersBtn.addEventListener('click', () => {
        window.location.href = '/culture';
      });
    }

    // 初始化：如果 URL 中有筛选参数，应用筛选
    if (window.location.search) {
      applyFilters();
    }
  });
</script>

<style>
  /* 统一背景样式 */
  .unified-bg {
    background-image: linear-gradient(to right, rgba(146, 64, 14, 0.05) 1px, transparent 1px),
                      linear-gradient(to bottom, rgba(146, 64, 14, 0.05) 1px, transparent 1px);
    background-color: var(--color-paper, #f8f5e8);
    background-size: 20px 20px;
  }

  /* 深色模式下的统一背景 */
  [data-theme='dark'] .unified-bg,
  [data-theme='dark'] .dark-mode-bg {
    background-color: var(--color-dark-paper, #2d2822) !important;
    background-image: linear-gradient(to right, rgba(146, 64, 14, 0.1) 1px, transparent 1px),
                      linear-gradient(to bottom, rgba(146, 64, 14, 0.1) 1px, transparent 1px) !important;
  }

  /* 使用更可靠的自定义类选择器 */
  [data-theme='dark'] .dark-mode-panel {
    background-color: var(--color-dark-surface, #282420) !important;
    border-color: rgba(184, 124, 80, 0.35) !important;
  }

  [data-theme='dark'] .dark-mode-card {
    background: linear-gradient(145deg, rgba(32, 30, 34, 0.8), rgba(45, 40, 34, 0.95)) !important;
    border-color: rgba(184, 124, 80, 0.35) !important;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3), inset 0 1px 1px rgba(255, 255, 255, 0.03) !important;
  }

  /* 原有的卷轴背景类可以保留，但不再使用 */
  .scroll-bg {
    background-image: linear-gradient(to right, rgba(146, 64, 14, 0.05) 1px, transparent 1px),
                      linear-gradient(to bottom, rgba(146, 64, 14, 0.05) 1px, transparent 1px);
    background-size: 20px 20px;
  }

  /* 深色模式下的卷轴背景 */
  [data-theme='dark'] .scroll-bg {
    background-color: rgba(32, 30, 34, 0.95);
    background-image: linear-gradient(to right, rgba(146, 64, 14, 0.1) 1px, transparent 1px),
                      linear-gradient(to bottom, rgba(146, 64, 14, 0.1) 1px, transparent 1px);
    background-size: 20px 20px;
  }

  /* 保留其他原有样式 */
  /* 定义古籍卡片样式 */
  .culture-card {
    position: relative;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    background: linear-gradient(145deg, rgba(248, 245, 232, 0.8), rgba(248, 245, 232, 0.95));
    border: 1px solid rgba(146, 64, 14, 0.1);
    transition: var(--theme-transition);
  }

  .culture-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    border-color: rgba(146, 64, 14, 0.2);
  }

  [data-theme='dark'] .culture-card:hover {
    background: linear-gradient(145deg, rgba(40, 38, 48, 0.95), rgba(46, 43, 53, 0.95));
    border-color: rgba(201, 145, 95, 0.45);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5), inset 0 1px 1px rgba(255, 255, 255, 0.05);
  }

  /* 书卷装饰 */
  .scroll-decoration {
    position: relative;
    border-radius: 8px;
    overflow: hidden;
  }

  /* 印章效果 */
  .seal-mark {
    position: relative;
    background: radial-gradient(ellipse at center, rgba(139, 90, 43, 0.6) 0%, rgba(139, 90, 43, 0) 70%);
  }

  [data-theme='dark'] .seal-mark {
    background: radial-gradient(ellipse at center, rgba(184, 124, 80, 0.7) 0%, rgba(184, 124, 80, 0) 70%);
  }

  .seal-mark::after {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 80px;
    height: 80px;
    background-size: contain;
    background-repeat: no-repeat;
    opacity: 0.2;
    transform: rotate(15deg);
  }

  [data-theme='dark'] .seal-mark::after {
    opacity: 0.25;
  }

  /* 添加卡片中的图片处理 */
  .card-image {
    object-fit: cover;
    transition: all 0.3s ease;
  }

  [data-theme='dark'] .card-image {
    filter: brightness(0.9) contrast(1.1);
  }

  .group:hover .card-image {
    transform: scale(1.05);
  }

  /* 修复ink-decoration装饰元素 */
  .ink-decoration {
    background: radial-gradient(ellipse at center, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0) 70%);
  }

  [data-theme='dark'] .ink-decoration {
    background: radial-gradient(ellipse at center, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0) 70%);
  }

  /* 添加卡片标题悬停效果的深色模式样式 */
  .card-title-hover {
    color: #8a2c12;
  }

  [data-theme='dark'] .card-title-hover,
  [data-theme='dark'] .group-hover\:card-title-hover {
    color: #e67e56;
  }

  /* 添加复选框样式的深色模式适配 */
  .checkbox-container {
    width: 18px;
    height: 18px;
    border: 1px solid rgba(146, 64, 14, 0.3);
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.7);
  }

  [data-theme='dark'] .checkbox-container {
    background-color: rgba(40, 38, 48, 0.7);
    border-color: rgba(146, 64, 14, 0.5);
  }

  .checkbox-selected {
    background-color: rgba(217, 119, 6, 0.1);
    border-color: rgba(146, 64, 14, 0.7);
  }

  [data-theme='dark'] .checkbox-selected {
    background-color: rgba(217, 119, 6, 0.2);
    border-color: rgba(184, 124, 80, 0.6);
  }

  .checkmark {
    width: 10px;
    height: 10px;
    background-color: #8a2c12;
    border-radius: 2px;
  }

  [data-theme='dark'] .checkmark {
    background-color: #d97706;
  }

  /* 修复标签样式 */
  .tag-selected {
    background-color: rgba(217, 119, 6, 0.1);
  }

  [data-theme='dark'] .tag-selected {
    background-color: rgba(217, 119, 6, 0.2);
  }

  [data-theme='dark'] .tag-item {
    background-color: rgba(40, 38, 48, 0.7);
  }

  /* 使用自定义类名来应用深色模式样式 */
  [data-theme='dark'] .dark-mode-bg {
    background-color: var(--color-dark-paper, #2d2822) !important;
    background-image: linear-gradient(to right, rgba(146, 64, 14, 0.1) 1px, transparent 1px),
                      linear-gradient(to bottom, rgba(146, 64, 14, 0.1) 1px, transparent 1px) !important;
  }

  [data-theme='dark'] .dark-mode-panel {
    background-color: var(--color-dark-surface, #282420) !important;
    border-color: rgba(184, 124, 80, 0.35) !important;
  }

  /* 为卡片添加自定义类名 */
  .culture-card {
    position: relative;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    background: linear-gradient(145deg, rgba(248, 245, 232, 0.8), rgba(248, 245, 232, 0.95));
    border: 1px solid rgba(146, 64, 14, 0.1);
    transition: var(--theme-transition);
  }

  /* 深色模式激活状态 */
  .dark-mode-active.dark-mode-card {
    background: linear-gradient(145deg, rgba(32, 30, 34, 0.8), rgba(45, 40, 34, 0.95)) !important;
    border-color: rgba(184, 124, 80, 0.35) !important;
  }
  
  .dark-mode-active.dark-mode-panel {
    background-color: var(--color-dark-surface, #282420) !important;
  }
  
  .dark-mode-active.dark-mode-bg {
    background-color: var(--color-dark-paper, #2d2822) !important;
  }

  /* 自定义横向滚动条样式 - 古籍风格 */
  /* 整体滚动条 */
  ::-webkit-scrollbar {
    height: 8px;
    width: 8px;
  }

  /* 滚动条轨道 */
  ::-webkit-scrollbar-track {
    background: rgba(248, 245, 232, 0.8);
    border-radius: 4px;
    border: 1px solid rgba(146, 64, 14, 0.1);
  }

  /* 滚动条滑块 */
  ::-webkit-scrollbar-thumb {
    background: rgba(146, 64, 14, 0.3);
    border-radius: 4px;
    border: 1px solid rgba(146, 64, 14, 0.2);
    background-image: linear-gradient(45deg, 
                      rgba(146, 64, 14, 0.3) 25%, 
                      rgba(146, 64, 14, 0.2) 25%, 
                      rgba(146, 64, 14, 0.2) 50%, 
                      rgba(146, 64, 14, 0.3) 50%, 
                      rgba(146, 64, 14, 0.3) 75%, 
                      rgba(146, 64, 14, 0.2) 75%);
    background-size: 10px 10px;
  }

  /* 鼠标悬停在滑块上 */
  ::-webkit-scrollbar-thumb:hover {
    background: rgba(146, 64, 14, 0.5);
    background-image: linear-gradient(45deg, 
                      rgba(146, 64, 14, 0.5) 25%, 
                      rgba(146, 64, 14, 0.4) 25%, 
                      rgba(146, 64, 14, 0.4) 50%, 
                      rgba(146, 64, 14, 0.5) 50%, 
                      rgba(146, 64, 14, 0.5) 75%, 
                      rgba(146, 64, 14, 0.4) 75%);
    background-size: 10px 10px;
  }

  /* 深色模式滚动条样式 */
  [data-theme='dark'] ::-webkit-scrollbar-track {
    background: rgba(40, 36, 32, 0.8);
    border: 1px solid rgba(184, 124, 80, 0.2);
  }

  [data-theme='dark'] ::-webkit-scrollbar-thumb {
    background: rgba(184, 124, 80, 0.3);
    border: 1px solid rgba(184, 124, 80, 0.25);
    background-image: linear-gradient(45deg, 
                      rgba(184, 124, 80, 0.3) 25%, 
                      rgba(184, 124, 80, 0.2) 25%, 
                      rgba(184, 124, 80, 0.2) 50%, 
                      rgba(184, 124, 80, 0.3) 50%, 
                      rgba(184, 124, 80, 0.3) 75%, 
                      rgba(184, 124, 80, 0.2) 75%);
  }

  [data-theme='dark'] ::-webkit-scrollbar-thumb:hover {
    background: rgba(184, 124, 80, 0.5);
    background-image: linear-gradient(45deg, 
                      rgba(184, 124, 80, 0.5) 25%, 
                      rgba(184, 124, 80, 0.4) 25%, 
                      rgba(184, 124, 80, 0.4) 50%, 
                      rgba(184, 124, 80, 0.5) 50%, 
                      rgba(184, 124, 80, 0.5) 75%, 
                      rgba(184, 124, 80, 0.4) 75%);
  }

  /* 针对标签容器的特殊滚动条样式 */
  .culture-card .flex.overflow-x-auto {
    scrollbar-width: thin;
    scrollbar-color: rgba(146, 64, 14, 0.3) rgba(248, 245, 232, 0.8);
    padding-bottom: 4px;
  }

  [data-theme='dark'] .culture-card .flex.overflow-x-auto {
    scrollbar-color: rgba(184, 124, 80, 0.3) rgba(40, 36, 32, 0.8);
  }
</style>
</MainLayout>
